// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GI {
  HIGH
  LOW
}

model Ingredient {
  id                 Int       @id @default(autoincrement())
  created            DateTime  @default(now()) @db.Timestamp(6)
  modified           DateTime? @default(now()) @db.Timestamp(6)
  name               String
  brand_vendor       String
  energy             Float
  protein            Float
  fat                Float
  carbs_per_100g     Float
  carbs_per_serve    Float?
  sugar              Float
  fibre              Float
  alcohol            Float?
  caffeine           Float?
  avg_serving_units  Float?
  avg_serving_weight Float?
  data_source        String
  gi                 GI?

  meals Meal[]
  users User[]
}

model Meal {
  id             Int          @id @default(autoincrement())
  created        DateTime     @default(now()) @db.Timestamp(6)
  modified       DateTime?    @default(now()) @db.Timestamp(6)
  name           String
  ingredients    Ingredient[]
  total_weight   Float
  total_carbs    Float?
  carbs_per_100g Float?
  gi             GI?

  users User[]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ingredients   Ingredient[]
  meals         Meal[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
