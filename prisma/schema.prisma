// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum GI {
  HIGH
  LOW
}

model Ingredient {
  id                     String    @id @default(cuid())
  created                DateTime  @default(now()) @db.Timestamp(6)
  modified               DateTime? @default(now()) @db.Timestamp(6)
  external_id            String?
  name                   String
  brand_vendor           String
  energy_per_100g        Float?
  protein_per_100g       Float?
  fat_per_100g           Float?
  saturated_fat_per_100g Float?
  carbs_per_100g         Float
  sugar_per_100g         Float?
  sodium_per_100g        Float?
  fibre_per_100g         Float?
  alcohol_per_100g       Float?
  caffeine_per_100g      Float?

  energy_per_serve        Float?
  protein_per_serve       Float?
  fat_per_serve           Float?
  saturated_fat_per_serve Float?
  carbs_per_serve         Float?
  sugar_per_serve         Float?
  sodium_per_serve        Float?
  fibre_per_serve         Float?
  alcohol_per_serve       Float?
  caffeine_per_serve      Float?

  serving_size_units Float? // No. of units in a serve
  serving_size_grams Float? // No. of grams per serve

  notes      String?
  is_generic Boolean @default(false)

  data_source String
  gi          GI?

  meals Meal[]
  users User[]
}

model Meal {
  id                 Int          @id @default(autoincrement())
  created            DateTime     @default(now()) @db.Timestamp(6)
  modified           DateTime?    @default(now()) @db.Timestamp(6)
  name               String
  ingredients        Ingredient[]
  total_weight       Float
  total_carbs        Float?
  carbs_per_100g     Float?
  carbs_per_serve    Float?
  notes              String?
  gi                 GI?
  serving_size_units Float? // No. of units in a serve
  serving_size_grams Float? // No. of grams per serve

  users User[]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ingredients   Ingredient[]
  meals         Meal[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
